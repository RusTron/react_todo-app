{"version":3,"sources":["components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodoFilter/TodoFilter.jsx","App.js","index.js"],"names":["TodoItem","items","editTitle","changeStatus","removeItem","useState","editId","setEditId","editedTitle","setEditedTitle","handleClick","event","preventDefault","target","value","key","type","map","item","id","className","classNames","editing","completed","checked","onChange","onDoubleClick","title","onClick","autoFocus","trimLeft","onKeyDown","onBlur","TodoList","setTodos","todos","setActiveCount","activeCount","length","readOnly","todoItems","includes","htmlFor","find","filter","TodoFilter","isSelected","setIsSelected","filteredTodos","filters","text","href","selected","all","innerText","active","App","setTitle","useEffect","localStorage","JSON","parse","getItem","setItem","stringify","useCallback","todo","addTodo","Date","onSubmit","placeholder","onKeyPress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c9d7c42.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({ items, editTitle, changeStatus, removeItem }) => {\n  const [editId, setEditId] = useState(0);\n  const [editedTitle, setEditedTitle] = useState('');\n\n  const handleClick = (event) => {\n    event.preventDefault();\n    if (!event.target.value) {\n      return removeItem(editId);\n    }\n\n    if (event.key === 'Enter' || event.type === 'blur') {\n      editTitle(editedTitle, editId);\n\n      return setEditId(0);\n    }\n\n    return setEditId(0);\n  };\n\n  return (\n    <>\n      {items.map(item => (\n        <li\n          key={item.id}\n          className={classNames({\n            editing: editId === item.id,\n            completed: item.completed,\n          })}\n        >\n          {item.id !== editId && (\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                checked={item.completed}\n                onChange={() => changeStatus(item.id)}\n              />\n              <label\n                onDoubleClick={() => {\n                  setEditId(item.id);\n                  setEditedTitle(item.title);\n                }}\n              >\n                {item.title}\n              </label>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => removeItem(item.id)}\n              />\n            </div>\n          )}\n          {item.id === editId && (\n            <input\n              type=\"text\"\n              className=\"edit\"\n              autoFocus\n              value={editedTitle}\n              onChange={({ target }) => setEditedTitle(target.value.trimLeft())}\n              onKeyDown={(event) => {\n                if (event.key === 'Enter' || event.key === 'Escape') {\n                  handleClick(event);\n                }\n              }\n              }\n              onBlur={handleClick}\n            />\n          )}\n        </li>\n      ))}\n    </>\n  );\n};\n\nTodoItem.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  editTitle: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  removeItem: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  items,\n  setTodos,\n  todos,\n  setActiveCount,\n  activeCount,\n}) => {\n  const changeStatus = (id) => {\n    setTodos(todos.map((item) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          completed: !item.completed,\n        };\n      }\n\n      return item;\n    }));\n\n    setActiveCount(items.find(item => item.id === id).completed\n      ? activeCount + 1\n      : activeCount - 1);\n  };\n\n  const changeAll = (value, todoItems) => {\n    setTodos(todos.map((item) => {\n      if (todoItems.includes(item)) {\n        return {\n          ...item,\n          completed: value,\n        };\n      }\n\n      return item;\n    }));\n\n    setActiveCount(value ? 0 : todos.length);\n  };\n\n  const removeItem = (id) => {\n    setTodos(items.filter(item => item.id !== id));\n    setActiveCount(items.find(item => item.id).completed\n      ? activeCount\n      : activeCount - 1);\n  };\n\n  const editTitle = (value, editId) => {\n    setTodos(items.map((item) => {\n      if (item.id === editId) {\n        return { ...item, title: value };\n      }\n\n      return item;\n    }));\n  };\n\n  return (\n    <section className=\"main\">\n      {items.length !== 0 && (\n        <>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            readOnly\n            checked={activeCount === 0 && items.length}\n            onChange={({ target }) => changeAll(target.checked, items)}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        </>\n      )}\n\n      <ul className=\"todo-list\">\n        {items.map(item => (\n          <li key={item.id}>\n            <input\n              type=\"text\"\n              className=\"edit\"\n            />\n          </li>\n        ))}\n\n        <TodoItem\n          items={items}\n          editTitle={editTitle}\n          changeStatus={changeStatus}\n          removeItem={removeItem}\n        />\n      </ul>\n    </section>\n  );\n};\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  setTodos: PropTypes.func.isRequired,\n  setActiveCount: PropTypes.func.isRequired,\n  activeCount: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoFilter = ({\n  isSelected,\n  setIsSelected,\n  filteredTodos,\n  filters,\n}) => {\n  const handleClick = (text) => {\n    setIsSelected(text);\n    filteredTodos(text);\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({ selected: isSelected === filters.all })}\n          onClick={({ target }) => handleClick(target.innerText)}\n        >\n          {filters.all}\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({ selected: isSelected === filters.active })}\n          onClick={({ target }) => handleClick(target.innerText)}\n        >\n          {filters.active}\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({ selected: isSelected === filters.completed })}\n          onClick={({ target }) => handleClick(target.innerText)}\n        >\n          {filters.completed}\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nTodoFilter.propTypes = {\n  isSelected: PropTypes.bool.isRequired,\n  setIsSelected: PropTypes.func.isRequired,\n  filteredTodos: PropTypes.func.isRequired,\n  filters: PropTypes.shape({\n    all: PropTypes.string.isRequired,\n    active: PropTypes.string.isRequired,\n    completed: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\n\nconst filters = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n\nconst { active, completed } = filters;\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [activeCount, setActiveCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [isSelected, setIsSelected] = useState(filters.all);\n\n  useEffect(() => {\n    if (localStorage.todos) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n      setActiveCount(JSON.parse(localStorage.getItem('count')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n    localStorage.setItem('count', JSON.stringify(activeCount));\n  }, [todos, activeCount]);\n\n  const filteredTodos = useCallback((selected = isSelected) => {\n    if (selected === active) {\n      return todos.filter(todo => !todo.completed && todo.title);\n    }\n\n    if (selected === completed) {\n      return todos.filter(todo => todo.completed && todo.title);\n    }\n\n    return todos.filter(todo => todo.title);\n  }, [todos, isSelected]);\n\n  const addTodo = () => {\n    const todo = {\n      title,\n      id: +new Date(),\n      completed: false,\n    };\n\n    if (!todo.title) {\n      return;\n    }\n\n    setTodos([...todos, todo]);\n    setTitle('');\n    setActiveCount(activeCount + 1);\n  };\n\n  const clearComleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>TodoS</h1>\n\n        <form onSubmit={addTodo}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={({ target }) => setTitle(target.value.trimLeft())}\n            onKeyPress={(event) => {\n              if (event.key === 'Enter') {\n                event.preventDefault();\n                addTodo();\n              }\n            }}\n          />\n        </form>\n      </header>\n      <TodoList\n        items={filteredTodos(isSelected)}\n        setTodos={setTodos}\n        todos={todos}\n        setActiveCount={setActiveCount}\n        activeCount={activeCount}\n      />\n      {todos.length !== 0 && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {activeCount === 1 ? `1 item left` : `${activeCount} items left`}\n          </span>\n\n          <TodoFilter\n            isSelected={isSelected}\n            setIsSelected={setIsSelected}\n            filteredTodos={filteredTodos}\n            filters={filters}\n          />\n          {activeCount !== todos.length && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={clearComleted}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}